CS 536: PROJECT 5 - CSX CODE GENERATOR

Caela Northey (cs login: caela)	905 653 2238 
Alan Irish    (cs login: irish) 906 591 2819

DUE DATE: FRIDAY DEC 13, 2013

********************************************************************************

This project is the final installment of our CSX compiler, the code generator.
Following the Visitor model of the previous assignment, we will walk the
abstract syntax tree node by node to generate assembly code for the JVM using
Jasmine to produce the bytecode. The main files we will be manipulating are:

 - CodeGenerating.java: first, we added an enum to track different addressing
   modes (global, local, literal, stack, and none). Then we expanded the
   CSXLite sample version to include the full CSX features.

 - SymbolInfo.java: added additional fields to be used in conjunction with
   addressing mode considerations. Besides one for an ArdMode value, other
   fields include a String label if the Symbol is a global variable, an int
   varIndex if the Symbol is a local variable, etc. See Part I of the Code
   Generation Routines for more information.

 - ast.java: several additional fields were added to exprNode (e.g. for an
   addressing mode was added) as needed.

 - CSX.java: main driver for the CSX compilation process.

 - Other relevant files: TypeChecker.java(P4), csx.jlex(P3), csx.cup(P2)

TO DO::
 x set up git repo
 x divvy up AST nodes a la Unparsing and P4
 x implement part I of instructions
 x implement part II of instructions
 x implement part III of instructions
 x implement part IV of instructions
 x debugging:
   x get print to work
   x get read to work
   x pass all tests
